{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","utils/getPreparedTodos.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","dispatch","useEffect","todosData","TodosActions","visibleTodos","useMemo","completed","normalizedTitle","title","toLowerCase","normalizedQuery","trim","includes","getPreparedTodos","length","className","map","id","cn","onClick","CurrentTodoActions","setCurrentTodo","TodoFilter","onSubmit","event","preventDefault","onChange","newStatus","target","value","FilterActions","placeholder","newQuery","style","pointerEvents","Loader","TodoModal","useState","user","setUser","userId","userData","href","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee03ae98.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type FilterQueryAction = {\n  type: 'filter/Query',\n  payload: string,\n};\n\nconst setFilterQuery = (query: string): FilterQueryAction => ({\n  type: 'filter/Query',\n  payload: query,\n});\n\ntype FilterStatusAction = {\n  type: 'filter/Status',\n  payload: string,\n};\n\nconst setFilterStatus = (status: string): FilterStatusAction => ({\n  type: 'filter/Status',\n  payload: status,\n});\n\nexport const actions = { setFilterQuery, setFilterStatus };\n\ntype State = {\n  query: string,\n  status: string,\n};\n\ntype Action = FilterQueryAction | FilterStatusAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/Query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/Status':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadTodosAction = {\n  type: 'todos/Load',\n  payload: Todo[],\n};\n\nconst setLoadTodos = (todos:Todo[]): LoadTodosAction => ({\n  type: 'todos/Load',\n  payload: todos,\n});\n\nexport const actions = { setLoadTodos };\n\ntype State = Todo[];\ntype Action = LoadTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/Load':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport cn from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as TodosActions } from '../../features/todos';\nimport { actions as CurrentTodoActions } from '../../features/currentTodo';\nimport { getTodos } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { getPreparedTodos } from '../../utils/getPreparedTodos';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(CurrentTodoActions.setTodo(todo));\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(todosData => dispatch(TodosActions.setLoadTodos(todosData)));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return getPreparedTodos(todos, query, status);\n  }, [query, status, todos]);\n\n  return (\n    <>\n      {(visibleTodos.length === 0 && todos.length !== 0) && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => setCurrentTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn({\n                      'far fa-eye': currentTodo !== todo,\n                      'far fa-eye-slash': currentTodo === todo,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const getPreparedTodos = (\n  todos: Todo[],\n  query:string,\n  status:string,\n): Todo[] => {\n  const filteredTodos = todos.filter(todo => {\n    if (status === 'completed') {\n      return todo.completed;\n    }\n\n    if (status === 'active') {\n      return !todo.completed;\n    }\n\n    return todo;\n  }).filter(todo => {\n    const normalizedTitle = todo.title.toLowerCase();\n    const normalizedQuery = query.toLowerCase().trim();\n\n    return normalizedTitle.includes(normalizedQuery);\n  });\n\n  return filteredTodos;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as FilterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setQuery = (newQuery: string) => {\n    dispatch(FilterActions.setFilterQuery(newQuery));\n  };\n\n  const setStatus = (newStatus: string) => {\n    dispatch(FilterActions.setFilterStatus(newStatus));\n  };\n\n  const resetQuery = () => {\n    dispatch(FilterActions.setFilterQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setStatus(event.target.value)}\n            value={status}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query !== '' && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as CurrentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const resetCurrentTodo = () => dispatch(CurrentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (currentTodo !== null) {\n      getUser(currentTodo.userId)\n        .then(userData => setUser(userData));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && <Loader />}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={resetCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                currentTodo?.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n              {' by '}\n              <a href=\"mailto:Sincere@april.biz\">{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList />\n              {todos.length === 0 && <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo !== null && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}